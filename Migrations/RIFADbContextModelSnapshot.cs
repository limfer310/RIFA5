// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RIFA.Data;

#nullable disable

namespace RIFA.Migrations
{
    [DbContext(typeof(RIFADbContext))]
    partial class RIFADbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RIFA.Models.Administrador", b =>
                {
                    b.Property<int>("AdministradorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministradorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministradorId"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdministradorId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Administrador", (string)null);

                    b.HasData(
                        new
                        {
                            AdministradorId = 1,
                            Contrasena = "66c6153d577b78384e7372eb047e7adcc5000af43977cce9053d187031ed7dea",
                            Email = "brunoarroyo1801@gmail.com",
                            Nombre = "Bruno Perez"
                        },
                        new
                        {
                            AdministradorId = 2,
                            Contrasena = "fe14fa851d8f1ce5bb7765ca2d3cc4129a0cf9d16b941f1e5b9771e0ca2a659a",
                            Email = "munozhuizardaniela@gmail.com",
                            Nombre = "Daniela Huizar"
                        },
                        new
                        {
                            AdministradorId = 3,
                            Contrasena = "c6ba922539eae0e7e0038af1ba16d35267dacc6ecc6ae2d2539f35907b151e86",
                            Email = "leyvahernandez310@gmail.com",
                            Nombre = "Maria Leyva"
                        },
                        new
                        {
                            AdministradorId = 4,
                            Contrasena = "7bd2b880ccc7ddd2e72ebf764d35908b1aff805961136b0c81f2a515e33361e0",
                            Email = "lilianlizetteramirezchaparro@gmail.com",
                            Nombre = "Lilian Ramirez"
                        },
                        new
                        {
                            AdministradorId = 5,
                            Contrasena = "9fbdffae9b43d5b3a37a7fd7cb51db3912693bd51b23a913d2bf12b805ddf44a",
                            Email = "enokvoca13@gmail.com",
                            Nombre = "Enok Lobato"
                        });
                });

            modelBuilder.Entity("RIFA.Models.Canje", b =>
                {
                    b.Property<int>("CanjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CanjeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CanjeId"));

                    b.Property<DateTime>("FechaCanje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    b.Property<int>("PuntosCanjeados")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("CanjeId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Canje", (string)null);
                });

            modelBuilder.Entity("RIFA.Models.Historial", b =>
                {
                    b.Property<int>("HistorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistorialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialId"));

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MaterialRecicladoId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialRecicladoID");

                    b.Property<int>("PuntosGanados")
                        .HasColumnType("int");

                    b.Property<string>("TipoMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("HistorialId");

                    b.HasIndex("MaterialRecicladoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Historial", (string)null);
                });

            modelBuilder.Entity("RIFA.Models.MaterialReciclado", b =>
                {
                    b.Property<int>("MaterialRecicladoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaterialRecicladoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialRecicladoId"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PuntosPorUnidad")
                        .HasColumnType("int");

                    b.Property<string>("TipoMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaterialRecicladoId");

                    b.ToTable("MaterialReciclado", (string)null);

                    b.HasData(
                        new
                        {
                            MaterialRecicladoId = 1,
                            Descripcion = "Botellas de plástico PET",
                            PuntosPorUnidad = 5,
                            TipoMaterial = "Botellas PET"
                        },
                        new
                        {
                            MaterialRecicladoId = 2,
                            Descripcion = "Tapas de plástico de botellas",
                            PuntosPorUnidad = 1,
                            TipoMaterial = "Tapas"
                        },
                        new
                        {
                            MaterialRecicladoId = 3,
                            Descripcion = "Hojas de papel de desecho",
                            PuntosPorUnidad = 2,
                            TipoMaterial = "Hojas de Papel"
                        });
                });

            modelBuilder.Entity("RIFA.Models.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PrecioPuntos")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.ToTable("Producto", (string)null);

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Descripcion = "1 copia blanco y negro.",
                            ImagenUrl = "/imagenes/copias.jpg",
                            Nombre = "Copias",
                            PrecioPuntos = 2,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 2,
                            Descripcion = "1 pluma negra.",
                            ImagenUrl = "/imagenes/pluma.jpg",
                            Nombre = "Plumas",
                            PrecioPuntos = 10,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 3,
                            Descripcion = "1 impresión a b/n tamaño carta.",
                            ImagenUrl = "/imagenes//impresion.jpg",
                            Nombre = "Impresiones",
                            PrecioPuntos = 4,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 4,
                            Descripcion = "1 lápiz de grafito HB.",
                            ImagenUrl = "/imagenes/lapiz.jpg",
                            Nombre = "Lápices",
                            PrecioPuntos = 10,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 5,
                            Descripcion = "Tijeras de acero inoxidable.",
                            ImagenUrl = "/imagenes/tijera.jpg",
                            Nombre = "Tijeras",
                            PrecioPuntos = 20,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 6,
                            Descripcion = "Cuaderno profesional de 100 hojas",
                            ImagenUrl = "/imagenes/cuaderno.jpg",
                            Nombre = "Cuadernos",
                            PrecioPuntos = 60,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 7,
                            Descripcion = "Regla de plástico de 20cm.",
                            ImagenUrl = "/imagenes/regla.jpg",
                            Nombre = "Reglas",
                            PrecioPuntos = 15,
                            Stock = 900
                        },
                        new
                        {
                            ProductoId = 8,
                            Descripcion = "Folder marrón de cartón.",
                            ImagenUrl = "/imagenes/folder.jpg",
                            Nombre = "Folders",
                            PrecioPuntos = 5,
                            Stock = 900
                        });
                });

            modelBuilder.Entity("RIFA.Models.Registro", b =>
                {
                    b.Property<int>("RegistroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistroID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistroId"));

                    b.Property<int>("AdministradorId")
                        .HasColumnType("int")
                        .HasColumnName("AdministradorID");

                    b.Property<double>("CantidadRegistrada")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MaterialRecicladoId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialRecicladoID");

                    b.HasKey("RegistroId");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("MaterialRecicladoId");

                    b.ToTable("Registro", (string)null);
                });

            modelBuilder.Entity("RIFA.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroBoleta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PuntosAcumulados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Rol")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Usuario");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NumeroBoleta")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("RIFA.Models.Canje", b =>
                {
                    b.HasOne("RIFA.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RIFA.Models.Usuario", "Usuario")
                        .WithMany("Canjes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RIFA.Models.Historial", b =>
                {
                    b.HasOne("RIFA.Models.MaterialReciclado", "MaterialReciclado")
                        .WithMany("Historials")
                        .HasForeignKey("MaterialRecicladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIFA.Models.Usuario", "Usuario")
                        .WithMany("Historials")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialReciclado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RIFA.Models.Registro", b =>
                {
                    b.HasOne("RIFA.Models.Administrador", "Administrador")
                        .WithMany("Registros")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIFA.Models.MaterialReciclado", "MaterialReciclado")
                        .WithMany("Registros")
                        .HasForeignKey("MaterialRecicladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("MaterialReciclado");
                });

            modelBuilder.Entity("RIFA.Models.Administrador", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("RIFA.Models.MaterialReciclado", b =>
                {
                    b.Navigation("Historials");

                    b.Navigation("Registros");
                });

            modelBuilder.Entity("RIFA.Models.Usuario", b =>
                {
                    b.Navigation("Canjes");

                    b.Navigation("Historials");
                });
#pragma warning restore 612, 618
        }
    }
}
